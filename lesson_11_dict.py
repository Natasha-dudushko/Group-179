# # Создайте словарь, связав его с переменной school, и наполните данными, которые бы отражали
# # количество учащихся в разных 9 классах (9а, 9б, 9в, 9м, 9ф и т. п.). Внесите изменения в словарь
# # согласно следующему:
# # а) в одном из классов изменилось количество учащихся
# # б) в школе появился новый класс.
# # в) в школе был расформирован (удален) другой класс.
# # г) Вычислите общее количество учащихся 9 классов в школе.
# school = {'9A': 27, '9Б': 29, '9В': 26, '9Г': 26, '9Д': 28}
# school['9Б'] = 28
# school['9М'] = 30
# del school['9В']
# count = 0
# for key in school:
#     count += school[key]
# print(school)
# print(count)
#
# # Вам дан словарь, состоящий из пар слов. Каждое слово является синонимом к парному ему слову.
# # Все слова в словаре различны. Для введённого слова вывести его синоним или написать что его нет.
# d = {'белый': 'белоснежный', 'необычные': 'оригинальные', 'характерный': 'свойственной', 'магический': 'волшебный'}
# while True:
#     word = input("введите слово или выход: ")
#     if word == "выход":
#         break
#     for key, value in d.items():
#         if word == key:
#             print(f'синосим слова "{word}": {value}')
#             break
#         elif word == value:
#             print(f'синосим слова "{word}": {key}')
#             break
#     else:
#         print(f'синосима к слову "{word}" в словаре нет')
#
# # Коля устал запоминать телефонные номера и заказал у Вас программу, которая заменила бы ему телефонную книгу.
# # Коля может послать программе два вида запросов: строку, содержащую имя контакта и его номер,
# # разделенные пробелом, или просто имя контакта. В первом случае программа должна добавить в книгу новый номер,
# # во втором – вывести номер контакта. Ввод происходит до символа точки. Если введенное имя уже содержится
# # в списке контактов, необходимо перезаписать номер.
# # Sample Input:
# # Ben 89001234050
# # Alice 210-220
# # Alice
# # Alice 404-502
# # Ben
# # Nick +4(908)273-22-42
# # Nick
# # Alice
# # Robert 51234047129
# d = {}
# lst = []
# while True:
#     name = input()
#     name_lst = name.split()
#     if name == '.':
#         break
#     if len(name_lst) == 1:
#         if name not in d:
#             lst.append('none')
#         else:
#             lst.append(d[name])
#     if len(name_lst) == 2:
#         a = name_lst[0]
#         b = name_lst[-1]
#         if a not in d:
#             d[a] = b
#         else:
#             d[a] = b
# print(*lst, sep='\n')
#
# # Программа принимает на вход строки до символа точки, состоящие из понятий и их определений,
# # разделенных знаком тире. После заполнения словаря программе передается натуральное число
# # m – количество запросов, а затем m строк, каждая из которых представляет собой одно понятие.
# # Если это понятие есть в словаре, необходимо вывести его определение, в обратном случае – "Не найдено".
# # Sample Input:
# # DNS – компьютерная система для получения, хранения и обработки информации о доменных именах
# # Интрасеть – это замкнутая внутренняя сеть какой-либо организации, работающая по Интернет-протоколу TCP/IP
# # Фича – недокументированная дополнительная возможность, фишка
# # Мейнфрейм – большой компьютер, имеющий высокую вычислительную мощность
# d = {}
# while True:
#     word = input()
#     if word == ".":
#         break
#     else:
#         l = word.split(' – ')
#         a = l[0]
#         b = l[-1]
#         d[a] = b
# m = int(input('введите количество запросов: '))
# lst = []
# while m > 0:
#     name = input().lower()
#     if name in d:
#         lst.append(d[name])
#     else:
#         lst.append('Не найдено')
#     m -= 1
# print(*lst, sep='\n')
#
# # Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется
# # в этой книге. Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова,
# # разделённые пробелом и вывести получившуюся статистику. Программа должна считывать одну строку со
# # стандартного ввода и выводить для каждого уникального слова в этой строке число его повторений
# # (без учёта регистра) в формате "слово количество". Порядок вывода слов может быть произвольным,
# # каждое уникальное слово﻿ должно выводиться только один раз.
# # Sample Input 1:
# # a aa abC aa ac abc bcd a
# # Sample Output 1:
# # ac 1
# # a 2
# # abc 2
# # bcd 1
# # aa 2
#
# s = input().lower().split()
# d = {}
# for i in range(len(s)):
#     if s.index(s[i]) == i:
#         d[s[i]] = s.count(s[i])
# for key in d:
#     print(key, d[key])
#
# # Коля понял, что у многих из его знакомых есть несколько телефонных номеров и нельзя хранить
# # только один из них. Он попросил доработать Вашу программу так, чтобы можно было добавлять к
# # существующему контакту новый номер или даже несколько номеров, которые передаются через запятую.
# #  По запросу телефонного номера должен выводиться весь список номеров в порядке добавления,
# #  номера должны разделяться запятой. Если у контакта нет телефонных номеров,
# #  должна выводиться строка "Не найдено".
# d = {}
# lst = []
# while True:
#     name = input()
#     name_lst = name.split()
#     if name == '.':
#         break
#     if name.count(' ') == 0:
#         if name not in d:
#             lst.append('Не найдено')
#         else:
#             lst.append(d[name])
#     if name.count(' ') > 0:
#         i = name.find(' ')
#         a = name[: i]
#         b = name[i + 1:]
#         if a not in d:
#             d[a] = b
#         else:
#             d[a] += ", "
#             d[a] += b
# print(*lst, sep='\n')
